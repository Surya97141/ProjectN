import requests
from sentence_transformers import SentenceTransformer, util
import gradio as gr

# Initialize the model for semantic similarity
model = SentenceTransformer('all-MiniLM-L6-v2')

# NewsAPI configuration
NEWS_API_KEY = 'YOUR_NEWSAPI_KEY'
NEWS_API_URL = 'https://newsapi.org/v2/everything'

def fetch_real_time_news(query):
    """Fetch real-time news articles based on the query."""
    params = {
        'q': query,
        'language': 'en',
        'apiKey': NEWS_API_KEY,
        'pageSize': 5,
        'sortBy': 'relevancy'
    }
    response = requests.get(NEWS_API_URL, params=params)
    articles = response.json().get('articles', [])
    return [(article['title'], article['description'], article['url']) for article in articles]

def semantic_similarity(query, articles):
    """Compute semantic similarity between query and fetched articles."""
    query_embedding = model.encode(query, convert_to_tensor=True)
    results = []
    for title, description, url in articles:
        combined_text = f"{title}. {description}"
        article_embedding = model.encode(combined_text, convert_to_tensor=True)
        similarity = util.cos_sim(query_embedding, article_embedding).item()
        results.append((title, description, url, similarity))
    results.sort(key=lambda x: x[3], reverse=True)
    return results

def verify_news(query):
    """Fetches news articles and checks for verification based on semantic similarity."""
    articles = fetch_real_time_news(query)
    if not articles:
        return "No articles found", []

    results = semantic_similarity(query, articles)
    top_result = results[0] if results else None
    status = "Verified ✅" if top_result and top_result[3] > 0.75 else "Needs Verification ⚠️"
    response = f"Status: {status}\n\nTop Matches:\n"
    for title, desc, url, score in results[:3]:
        response += f"Title: {title}\nDescription: {desc}\nURL: {url}\nSimilarity: {score:.2f}\n\n"
    return response, results
